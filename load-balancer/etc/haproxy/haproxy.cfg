# https://github.com/deoren/postfix-examples

# Purpose:
#
#   Load balance incoming mail connections to several "backend" mail relays


# References:
#
# http://www.haproxy.com/blog/preserve-source-ip-address-despite-reverse-proxies/
# https://www.haproxy.com/blog/efficient-smtp-relay-infrastructure-with-postfix-and-load-balancers/
# https://www.haproxy.org/download/1.6/doc/configuration.txt
# https://www.vcloudnine.de/load-balancing-inbound-smtp-connection-with-haproxy/
# https://www.vcloudnine.de/load-balancing-microsoft-exchange-2013-with-haproxy/
#
# http://www.postfix.org/postconf.5.html#smtpd_upstream_proxy_protocol
# http://postfix.1071664.n5.nabble.com/postfix-version-2-10-20120902-relay-issue-td50315.html
# http://postfix.1071664.n5.nabble.com/haproxy-enablement-issues-td78819.html
# http://www.networkinghowtos.com/howto/run-postfix-on-multiple-ports/
# https://jrfom.com/2015archive/2014/10/13/haproxy-with-keepalived-for-fail-over/
# http://www.postfix.org/master.5.html
#
# http://cbonte.github.io/haproxy-dconv/1.6/configuration.html#4-tcp-check%20expect
# https://www.haproxy.com/doc/aloha/7.0/haproxy/healthchecks.html#checking-a-smtp-service
# https://www.haproxy.com/doc/hapee/1.6r2/traffic_management/alerting.html
#
# https://gist.github.com/Iristyle/5005653
# http://expect.sourceforge.net/example/mkpasswd.man.html
# https://unix.stackexchange.com/questions/187333/why-mkpasswd-m-sha-512-produce-different-result-every-time-it-is-called
# https://linux.die.net/man/1/mkpasswd
# https://www.cyberciti.biz/faq/generating-random-password/


global

    # log <address> [len <length>] [format <format>] <facility> [max level [min level]]
    #
    # Adds a global syslog server. Up to two global servers can be defined. They
    # will receive logs for startups and exits, as well as all logs from proxies
    # configured with "log global".
    #
    # An optional level can be specified to filter outgoing messages. By default,
    # all messages are sent. If a maximum level is specified, only messages with a
    # severity at least as important as this level will be sent. An optional minimum
    # level can be specified. If it is set, logs emitted with a more severe level
    # than this one will be capped to this level. This is used to avoid sending
    # "emerg" messages on all terminals on some default syslog configurations.
    # Eight levels are known :
    #
    # emerg  alert  crit   err    warning notice info  debug
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#3.1-log
    log /dev/log    local0

    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon


    ##################################################################
    # SSL/TLS settings for all configurations that use it
    ##################################################################

    # Disabled older SSL/TLS versions in all backend/frontend sections
    ssl-default-bind-options no-sslv3 no-tlsv10

    # https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    # Last verified: 2018-02-26
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS

    tune.ssl.default-dh-param 4096

    # Increase TLS session cache size and lifetime to avoid computing
    # too many symmetric keys
    tune.ssl.cachesize 100000
    tune.ssl.lifetime 600

    # spread-checks <0..50, in percent>
    #
    # Sometimes it is desirable to avoid sending agent and health checks to
    # servers at exact intervals, for instance when many logical servers are
    # located on the same physical server. With the help of this parameter, it
    # becomes possible to add some randomness in the check interval between 0
    # and +/- 50%. A value between 2 and 5 seems to show good results. The
    # default value remains at 0.
    spread-checks 4

    # max-spread-checks <delay in milliseconds>
    #
    # By default, haproxy tries to spread the start of health checks across the
    # smallest health check interval of all the servers in a farm. The
    # principle is to avoid hammering services running on the same server. But
    # when using large check intervals (10 seconds or more), the last servers
    # in the farm take some time before starting to be tested, which can be a
    # problem. This parameter is used to enforce an upper bound on delay
    # between the first and the last check, even if the servers' check
    # intervals are larger. When servers run with shorter intervals, their
    # intervals will be respected though.
    max-spread-checks 2000

userlist stats-auth
    group admin users adminuser
    group readonly users user1

    # Passwords created via mkpasswd -m sha-512 PASSWORD_HERE
    user user1 password NOT_REAL_PASSWORD_HASH
    user adminuser password NOT_REAL_PASSWORD_HASH

# Mail servers that will be used to send alerts when various issues occur
# See the 'defaults' section for the 'email-alert' directives that are
# used to set recipient, sender alert level and hostname values.
mailers mailservers

    # Send email alerts to local Postfix instance on this box. That instance
    # is currently configured to first attempt relaying mail back to this
    # HAProxy instance. This HAProxy instance then attempts to deliver
    # mail using the backend relay nodes that are marked 'UP'.
    #
    # If all backend relays are down, then the local Postfix instance will
    # fallback to delivering alerts using mailrelay.example.org.
    mailer localhost 127.0.0.1:25


defaults

    # Fix the maximum number of concurrent connections on a frontend
    # Default is 2000 connections
    maxconn 2000

    log global
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    # Use previously defined email server settings to send notifications
    email-alert mailers mailservers
    email-alert level notice
    email-alert from haproxy-alerts@subdomain.example.org

    # Because the aliases are currently managed directly by our relay nodes,
    # if HAProxy is having issues delivering mail THROUGH our relay nodes
    # we won't hear about it until Nagios alerts make their way to us.
    # By explicitly setting a target address here OUTSIDE of our relay servers
    # we should have a better chance learning of issues that are affecting
    # mail delivery.
    #email-alert to haproxy-admin@subdomain.example.org
    #
    # FIXME: Set this back to our alias once we have setup a cron job that
    # exports our aliases out to a SQLite db file that Postfix on this node
    # (in addition to our relay nodes) treat as an authoratative source.
    email-alert to help@example.org


    # Enable or disable session redistribution in case of connection failure
    # <interval> The optional integer value that controls how often redispatches
    # occur when retrying connections. Positive value P indicates a
    # redispatch is desired on every Pth retry, and negative value
    # N indicate a redispath is desired on the Nth retry prior to the
    # last retry. For example, the default of -1 preserves the
    # historical behaviour of redispatching on the last retry, a
    # positive value of 1 would indicate a redispatch on every retry,
    # and a positive value of 3 would indicate a redispatch on every
    # third retry. You can disable redispatches with a value of 0.
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#4-option%20redispatch
    option redispatch 1

    # Set the number of retries to perform on a server after a connection failure
    # It is important to understand that this value applies to the number of
    # connection attempts, not full requests. When a connection has effectively
    # been established to a server, there will be no more retry.
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#retries
    retries 3

    # fall <count>
    #
    # The "fall" parameter states that a server will be considered as dead after
    # <count> consecutive unsuccessful health checks. This value defaults to 3 if
    # unspecified. See also the "check", "inter" and "rise" parameters.
    #
    # Supported in default-server: Yes
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#5.2-fall

    # inter <delay> (in milliseconds)
    #
    # The "inter" parameter sets the interval between two consecutive health checks
    # to <delay> milliseconds. If left unspecified, the delay defaults to 2000 ms.
    # It is also possible to use "fastinter" and "downinter" to optimize delays
    # between checks depending on the server state
    #
    # downinter <delay> (in milliseconds)
    #
    # If server state is 'DOWN 100% (non-transitional)' then "downinter"
    # will be used if set, "inter" otherwise.
    #
    # Supported in default-server: Yes
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#inter

    # rise <count>
    #
    # The "rise" parameter states that a server will be considered as operational
    # after <count> consecutive successful health checks. This value defaults to 2
    # if unspecified. See also the "check", "inter" and "fall" parameters.
    #
    # Supported in default-server: Yes
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#rise

    # fall <count>
    #
    # The "fall" parameter states that a server will be considered as dead after
    # <count> consecutive unsuccessful health checks. This value defaults to 3 if
    # unspecified. See also the "check", "inter" and "rise" parameters.
    #
    # Supported in default-server: Yes
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#fall

    # Check each server waiting a longer between checks (e.g., wait on
    # relay nodes to perform multiple db queries), mark each server as
    # failed a little quicker than usual and wait longer than the norm
    # before returning a backend server to the pool. With layer 7
    # checks implemented the checks are more thorough, so hopefully we don't
    # need to be so aggressive with the timing of the checks (#57454, #75294).
    default-server inter 8000 downinter 2000 rise 5 fall 2

    # option log-health-checks
    #
    # Enable or disable logging of health checks status updates
    # Arguments : none
    #
    # By default, failed health check are logged if server is UP and successful
    # health checks are logged if server is DOWN, so the amount of additional
    # information is limited.
    #
    # When this option is enabled, any change of the health check status or to
    # the server's health will be logged, so that it becomes possible to know
    # that a server was failing occasional checks before crashing, or exactly when
    # it failed to respond a valid HTTP status, then when the port started to
    # reject connections, then when the server stopped responding at all.
    #
    # Note that status changes not caused by health checks (eg: enable/disable on
    # the CLI) are intentionally not logged by this option.
    #
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#4-option%20log-health-checks
    option log-health-checks

    # option log-separate-errors
    #
    # Change log level for non-completely successful connections
    # Arguments : none
    #
    # Sometimes looking for errors in logs is not easy. This option makes haproxy
    # raise the level of logs containing potentially interesting information such
    # as errors, timeouts, retries, redispatches, or HTTP status codes 5xx. The
    # level changes from "info" to "err". This makes it possible to log them
    # separately to a different file with most syslog daemons. Be careful not to
    # remove them from the original file, otherwise you would lose ordering which
    # provides very important information.

    # Using this option, large sites dealing with several thousand connections per
    # second may log normal traffic to a rotating buffer and only archive smaller
    # error logs.
    option log-separate-errors


listen stats

    description Overall statistics for this HAProxy load-balancer instance

    # Used just for the initial connection before we redirect the user to https
    bind *:4711

    # Combined file containing server, intermediate and root CA certs along
    # with the private key for the server cert.
    bind *:4712 ssl crt /etc/ssl/private/relay-lb_cert_bundle_with_key.pem

    option dontlognull
    mode http
    option httplog

    # Redirect user from http port to https port
    #http-request set-var(req.hostname) req.hdr(Host),field(1,:),lower if !{ ssl_fc }
    http-request set-var(req.hostname) req.hdr(Host),field(1,:),lower
    http-request redirect code 301 location https://%[var(req.hostname)]:4712/ if !{ ssl_fc }

    acl AUTH            http_auth(stats-auth)
    acl AUTH_ADMIN      http_auth_group(stats-auth) admin

    stats enable

    # It's OK if we display the version since this is used only by Sysadmins
    # who already have access to the version info via other means.
    #stats hide-version

    # The only "site" for using these ports is the admin UI, so use '/' as
    # the base path instead of requiring something like '/haproxy_stats' or
    # '/stats' in order to display the UI.
    stats uri /

    # Force a login if not already authenticated
    stats http-request auth unless AUTH

    # Allow administrator functionality if user logged in using admin creds
    # (there are separate read-only username and password pairs)
    stats admin if AUTH_ADMIN

    stats refresh 5s


frontend ft_smtp
    bind 192.168.2.199:25

    description Front-end for incoming SMTP connections

    # The instance will work in pure TCP mode. A full-duplex connection
    # will be established between clients and servers, and no layer 7
    # examination will be performed. This is the default mode. It
    # should be used for SSL, SSH, SMTP, ...
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#4.2-mode
    mode tcp

    timeout client 1m

    # Explicitly disable HTTP connection closing on the server side
    # https://cbonte.github.io/haproxy-dconv/1.6/configuration.html#option%20http-server-close
    no option http-server-close

    option tcplog

    # Allow logging of "null" connections to help troubleshoot failed proxy
    # connections
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#4-option%20dontlognull
    no option dontlognull

    default_backend bk_postfix

backend bk_postfix
    mode tcp

    description Backend pool of Postfix relay nodes that forward mail to mailrelay.example.org

    # Explicitly disable HTTP connection closing on the server side
    # https://cbonte.github.io/haproxy-dconv/1.6/configuration.html#option%20http-server-close
    no option http-server-close

    option tcplog

    # Set the maximum inactivity time on the server side
    timeout server 30s

    # Set the maximum time to wait for a connection attempt to a server to
    # succeed.
    timeout connect 7s

    # timeout check <timeout>: time allowed for the server to answer the
    # check. If both inter and timeout check are set, then the smaller value
    # of the two is used after the TCP connection is established
    #
    # When a timeout check is not set, inter starts with the establishment of
    # the TCP connection.
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#4-timeout%20check
    timeout check 10s

    # Each server is used in turns, according to their weights. This is the
    # smoothest and fairest algorithm when the server's processing time remains
    # equally distributed. This algorithm is dynamic, which means that server
    # weights may be adjusted on the fly for slow starts for instance. It is
    # limited by design to 4095 active servers per backend. Note that in some
    # large farms, when a server becomes up after having been down for a very
    # short time, it may sometimes take a few hundreds requests for it to be
    # re-integrated into the farm and start receiving traffic. This is normal,
    # though very rare. It is indicated here in case you would have the chance
    # to observe it, so that you don't worry.
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#balance
    balance roundrobin

    # Specify a method to use for mapping hashes to servers
    # Options: consistent, map-based
    #
    # consistent
    #
    # the hash table is a tree filled with many occurrences of each
    # server. The hash key is looked up in the tree and the closest
    # server is chosen. This hash is dynamic, it supports changing
    # weights while the servers are up, so it is compatible with the
    # slow start feature. It has the advantage that when a server
    # goes up or down, only its associations are moved. When a
    # server is added to the farm, only a few part of the mappings
    # are redistributed, making it an ideal method for caches.
    # However, due to its principle, the distribution will never be
    # very smooth and it may sometimes be necessary to adjust a
    # server's weight or its ID to get a more balanced distribution.
    # In order to get the same distribution on multiple load
    # balancers, it is important that all servers have the exact
    # same IDs. Note: consistent hash uses sdbm and avalanche if no
    # hash function is specified.
    hash-type consistent

    # check
    #
    # This option enables health checks on the server. By default, a server is
    # always considered available. If "check" is set, the server is available when
    # accepting periodic TCP connections, to ensure that it is really able to serve
    # requests. The default address and port to send the tests to are those of the
    # server, and the default source is the same as the one defined in the
    # backend. It is possible to change the address using the "addr" parameter, the
    # port using the "port" parameter, the source address using the "source"
    # address, and the interval and timers using the "inter", "rise" and "fall"
    # parameters. The request method is define in the backend using the "httpchk",
    # "smtpchk", "mysql-check", "pgsql-check" and "ssl-hello-chk" options. Please
    # refer to those options and parameters for more information.
    #
    # Supported in default-server: No
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#5.2-check
    #
    # ############################################################
    # check-send-proxy
    # ############################################################
    #
    # This option forces emission of a PROXY protocol line with outgoing health
    # checks, regardless of whether the server uses send-proxy or not for the
    # normal traffic. By default, the PROXY protocol is enabled for health checks
    # if it is already enabled for normal traffic and if no "port" nor "addr"
    # directive is present. However, if such a directive is present, the
    # "check-send-proxy" option needs to be used to force the use of the
    # protocol. See also the "send-proxy" option for more information.
    #
    # Supported in default-server: No
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#check-send-proxy

    # send-proxy
    #
    # The "send-proxy" parameter enforces use of the PROXY protocol over any
    # connection established to this server. The PROXY protocol informs the other
    # end about the layer 3/4 addresses of the incoming connection, so that it can
    # know the client's address or the public address it accessed to, whatever the
    # upper layer protocol. For connections accepted by an "accept-proxy" listener,
    # the advertised address will be used. Only TCPv4 and TCPv6 address families
    # are supported. Other families such as Unix sockets, will report an UNKNOWN
    # family. Servers using this option can fully be chained to another instance of
    # haproxy listening with an "accept-proxy" setting. This setting must not be
    # used if the server isn't aware of the protocol. When health checks are sent
    # to the server, the PROXY protocol is automatically used when this option is
    # set, unless there is an explicit "port" or "addr" directive, in which case an
    # explicit "check-send-proxy" directive would also be needed to use the PROXY
    # protocol. See also the "accept-proxy" option of the "bind" keyword.
    #
    # Supported in default-server: No
    # http://cbonte.github.io/haproxy-dconv/configuration-1.7.html#send-proxy

    #
    # Note: When reviewing the log messages, be aware that HAProxy considers
    # 'comment', 'connect', 'send' and 'expect' as separate steps. The
    # "connect port 2525 ..." entry is step 2 and "expect string 221 ..."
    # is step 28. In short, every use of 'tcp-check' (whether "comment" or
    # otherwise) is a separate step.
    option tcp-check

    tcp-check comment "Opening connection to backend node"
    tcp-check connect port 2525 send-proxy

    tcp-check comment "Waiting for string 220"
    tcp-check expect string 220

    tcp-check comment "Sending greeting to backend node"
    tcp-check send EHLO\ relay-lb1.subdomain.example.org\r\n

    tcp-check comment "Waiting for string 250"
    tcp-check expect string 250

    tcp-check comment "Providing FROM address"
    tcp-check send MAIL\ FROM:<haproxy-smtp-check@subdomain.example.org>\r\n

    tcp-check comment "Waiting for string 250 2.1.0 Ok"
    tcp-check expect string 250\ 2.1.0\ Ok

    tcp-check comment "Providing RCPT TO address"
    tcp-check send RCPT\ TO:<devnull@subdomain.example.org>\r\n

    tcp-check comment "Waiting for string 250 2.1.5 Ok"
    tcp-check expect string 250\ 2.1.5\ Ok

    tcp-check comment "Declaring intent to send message"
    tcp-check send DATA\r\n

    tcp-check comment "Waiting for string 354"
    tcp-check expect string 354

    tcp-check comment "Sending email body"
    tcp-check send HAProxy\ Health\ Check\r\n.\r\n

    tcp-check comment "Waiting for string 250 2.0.0 Ok: queued as"
    tcp-check expect string 250\ 2.0.0\ Ok:\ queued\ as

    tcp-check comment "Sending QUIT message"
    tcp-check send QUIT\r\n

    tcp-check comment "Waiting for string 221 2.0.0 Bye"
    tcp-check expect string 221\ 2.0.0\ Bye

    # Communicate with each backend using using the PROXY protocol, check the
    # health of each server using the PROXY protocol and apply checks using
    # the parameters defined earlier with the default-server directive.
    server relay1 relay1.subdomain.example.org:2525 send-proxy check-send-proxy check on-marked-down shutdown-sessions
    server relay2 relay2.subdomain.example.org:2525 send-proxy check-send-proxy check on-marked-down shutdown-sessions
    server relay3 relay3.subdomain.example.org:2525 send-proxy check-send-proxy check on-marked-down shutdown-sessions
